// Code generated by mockery v2.1.0. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/kyma/components/application-registry/internal/apperrors"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateAuthorizationPolicy provides a mock function with given fields: application, appUID, serviceId, name
func (_m *Repository) CreateAuthorizationPolicy(application string, appUID types.UID, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, appUID, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, types.UID, string, string) apperrors.AppError); ok {
		r0 = rf(application, appUID, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// DeleteAuthorizationPolicy provides a mock function with given fields: name
func (_m *Repository) DeleteAuthorizationPolicy(name string) apperrors.AppError {
	ret := _m.Called(name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string) apperrors.AppError); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}

// UpsertAuthorizationPolicy provides a mock function with given fields: application, appUID, serviceId, name
func (_m *Repository) UpsertAuthorizationPolicy(application string, appUID types.UID, serviceId string, name string) apperrors.AppError {
	ret := _m.Called(application, appUID, serviceId, name)

	var r0 apperrors.AppError
	if rf, ok := ret.Get(0).(func(string, types.UID, string, string) apperrors.AppError); ok {
		r0 = rf(application, appUID, serviceId, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(apperrors.AppError)
		}
	}

	return r0
}
